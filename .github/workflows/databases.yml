---
name: databases

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 1 * * *'

jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      -
        name: Build
        run: go build -o bin/apppack
      -
        uses: actions/upload-artifact@master
        with:
          name: apppack
          path: bin
      -
        name: AppPack Init
        run: |
            ./bin/apppack create region --region us-east-2 \
                --dockerhub-username $DOCKERHUB_USERNAME \
                --dockerhub-access-token $DOCKERHUB_ACCESS_TOKEN
            ./bin/apppack create cluster --region us-east-2 \
                --domain testclusters.apppack.io \
                --instance-class t3.micro
        timeout-minutes: 15
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  standard-mysql:
    runs-on: ubuntu-latest
    needs: ["init"]
    steps:
      -
        uses: actions/download-artifact@master
        with:
          name: apppack
          path: bin
      -
        name: Create standard MySQL
        run: |
            chmod +x ./bin/apppack
            ./bin/apppack create database --region us-east-2 \
                --non-interactive \
                --instance-class db.t3.micro \
                --engine mysql \
                --allocated-storage 10 \
                --max-allocated-storage 20 \
                standard-mysql
        timeout-minutes: 30
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Destroy standard MySQL
        run: |
            yes apppack-database-standard-mysql | ./bin/apppack destroy database standard-mysql \
                          --region us-east-2
        if: always()
        timeout-minutes: 35
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  standard-postgres:
    runs-on: ubuntu-latest
    needs: ["init"]
    steps:
      -
        uses: actions/download-artifact@master
        with:
          name: apppack
          path: bin
      -
        name: Create standard Postgres
        run: |
            chmod +x ./bin/apppack
            ./bin/apppack create database --region us-east-2 \
                --non-interactive \
                --instance-class db.t3.micro \
                --engine postgres \
                --allocated-storage 10 \
                --max-allocated-storage 20 \
                standard-postgres
        timeout-minutes: 25
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Destroy standard Postgres
        run: |
            yes apppack-database-standard-postgres | ./bin/apppack destroy database standard-postgres \
                          --region us-east-2
        if: always()
        timeout-minutes: 35
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  aurora-mysql:
    runs-on: ubuntu-latest
    needs: ["init"]
    steps:
      -
        uses: actions/download-artifact@master
        with:
          name: apppack
          path: bin
      -
        name: Create Aurora MySQL
        run: |
            chmod +x ./bin/apppack
            ./bin/apppack create database --region us-east-2 \
                --non-interactive \
                --instance-class db.t3.small \
                --aurora \
                --engine mysql \
                --allocated-storage 10 \
                --max-allocated-storage 20 \
                aurora-mysql
        timeout-minutes: 25
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Destroy Aurora MySQL
        run: |
            yes apppack-database-aurora-mysql | ./bin/apppack destroy database aurora-mysql \
                          --region us-east-2
        if: always()
        timeout-minutes: 35
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  aurora-postgres:
    runs-on: ubuntu-latest
    needs: ["init"]
    steps:
      -
        uses: actions/download-artifact@master
        with:
          name: apppack
          path: bin
      -
        name: Create Aurora Postgres
        run: |
            chmod +x ./bin/apppack
            ./bin/apppack create database --region us-east-2 \
                --non-interactive \
                --instance-class db.t3.medium \
                --aurora \
                --engine postgres \
                aurora-postgres
        timeout-minutes: 25
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Destroy Aurora Postgres
        run: |
            yes apppack-database-aurora-postgres | ./bin/apppack destroy database aurora-postgres \
                          --region us-east-2
        if: always()
        timeout-minutes: 35
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  redis:
    runs-on: ubuntu-latest
    needs: ["init"]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        uses: actions/download-artifact@master
        with:
          name: apppack
          path: bin
      -
        name: Create Redis
        run: |
            chmod +x ./bin/apppack
            ./bin/apppack create redis --region us-east-2 \
                --non-interactive
        timeout-minutes: 35
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Wait for steady state
        run: |
          # destroy fails if replication group is not available
          ID="$(aws cloudformation describe-stacks --stack apppack-redis-apppack --output text --query Stacks[0].Outputs | grep Endpoint | cut -f2 -d.)"
          until [ "$(aws elasticache describe-replication-groups --replication-group-id $ID --query ReplicationGroups[0].Status --output text)" = "available" ]; do
            echo "waiting for replication group to become available..."
            sleep 10
          done
        timeout-minutes: 5
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
      -
        name: Destroy Redis
        run: |
            ID="$(aws cloudformation describe-stacks --stack apppack-redis-apppack --output text --query Stacks[0].Outputs | grep Endpoint | cut -f2 -d.)"
            # debugging stack deletion failures
            ./.github/workflows/redis_status.sh $ID &
            PID=$!
            yes apppack-redis-apppack | ./bin/apppack destroy redis apppack \
                          --region us-east-2
            kill $PID
        if: always()
        timeout-minutes: 18
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
  destroy:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - standard-mysql
      - standard-postgres
      - aurora-mysql
      - aurora-postgres
      - redis
    steps:
      -
        uses: actions/download-artifact@master
        with:
          name: apppack
          path: bin
      -
        name: Destroy cluster
        run: |
            chmod +x ./bin/apppack
            yes apppack-cluster-apppack | ./bin/apppack destroy cluster apppack --region us-east-2
        if: always()
        timeout-minutes: 8
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Destroy region
        run: |
          yes apppack-region-us-east-2 | ./bin/apppack destroy region --region us-east-2
        if: always()
        timeout-minutes: 3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Cleanup database snapshots
        run: |
            for d in $(aws rds describe-db-snapshots --snapshot-type manual --query 'DBSnapshots[].DBSnapshotIdentifier' --output text); do
              aws rds delete-db-snapshot --db-snapshot-identifier "$d"
            done
            for d in $(aws rds describe-db-cluster-snapshots --snapshot-type manual --query 'DBClusterSnapshots[].DBClusterSnapshotIdentifier' --output text); do
              aws rds delete-db-cluster-snapshot --db-cluster-snapshot-identifier "$d"
            done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
